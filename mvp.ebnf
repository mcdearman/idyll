# Non-terminals

root = decl+
decl = let
let = "let" ident+ "=" expr
expr = or
or = and ("or" or)?
and = cmp ("and" and)?
cmp = term (("<" | ">" | "<=" | ">=" | "=" | "!=")  cmp)?
term = factor (("+" | "-")  term)?
factor = power (("*" | "/" | "%")  factor)?
power = unary ("^" power)?
unary = apply | ("-" | "not") unary
apply = atom+
atom = ident | lit | letExpr | if | lambda | "(" expr ")"
lit = int 
| rational
| real 
| complex
| string 
| char 
| bool 
letExpr = "let" ident+ "=" expr "in" expr
if = "if" expr "then" expr 
    ("elif" expr "then" expr)* "else" expr
lambda = "\\" ident+ "->" expr

# Terminals/Tokens

ident = ?"([A-Za-z]|_)([A-Za-z]|_|\d)*"?
int = ?"((0b[0-1]+)|(0o[0-7]+)|(0x[0-9a-fA-F]+)|([1-9]\d*|0))"?
rational = ?"\d+/\d+"?
real = "((\d+(\.\d+))|(\.\d+))([Ee](\+|-)?\d+)?"
complex = "((\d+(\.\d+)?)|(\.\d+))([Ee](\+|-)?\d+)?i"
char = '\w'
string = "((\\"|\\\\)|[^\\"])*"
comment = "--[^\n]*|/\*([^*]|\**[^*/])*\*+/"
ws = "[ \n\t\r]+"
wildcard = "_"
eof = EOF