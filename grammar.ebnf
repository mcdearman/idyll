# Non-terminals

root = item+

item = decl | expr

decl = let 
     | fn 

let = "let" pat "=" expr

fn = "let" ident pat+ "->" expr

expr = pipe

pipe = stmt ("|>" pipe)?

stmt = or (";" stmt)?

or = and ("or" or)?

and = cmp ("and" and)?

cmp = term (("<" | ">" | "<=" | ">=" | "=" | "!=")  cmp)?

term = factor (("+" | "-")  term)?

factor = power (("*" | "/" | "%")  factor)?

power = unary ("^"  power)?

unary = ("-" | "not")* apply

apply = atom atom*

atom = ident 
     | lit 
     | letExpr 
     | fnExpr 
     | if 
     | match 
     | lambda 
     | list 
    #  | map 
     | "("  expr  ")"

letExpr = "let" pat "=" expr "in" expr

fnExpr = "let" ident pat+ "->" expr

if = "if" expr "then" expr 
    ("elif" expr "then" expr)* "else" expr

match = "match" expr "with" ("|" case)* "\\" case

case = pat "->" expr

pat = ident 
    | lit 
    # | listPat 
    # | pairPat 
    | wildcard 
    | unit

# listPat = "[" pat ("," pat)* "]"

# pairPat = "(" (pat  (","  pat)*)? ":"  pat ")"

lit = int 
    | rational
    | bool 
    | string 

lambda = "\\" pat+ "-" expr

# map = "{" ident ":" expr ("," ident ":" expr)* "}"

list = "[" (expr ("," expr)*)? "]"

# Terminals/Tokens

ident = ?"([A-Za-z]|_)([A-Za-z]|_|\d)*"?

int = ?"((0b[0-1]+)|(0o[0-7]+)|(0x[0-9a-fA-F]+)|([1-9]\d*|0))"?

rational = ?"\d+/\d+"?

# real = "((\d+(\.\d+))|(\.\d+))([Ee](\+|-)?\d+)?"

# complex = "((\d+(\.\d+)?)|(\.\d+))([Ee](\+|-)?\d+)?i"

# char = '\w'

string = "((\\"|\\\\)|[^\\"])*"

bool = "true" | "false"

comment = "--[^\n]*|/\*([^*]|\**[^*/])*\*+/"

ws = "[ \n\t\r]+"

wildcard = "_"

eof = EOF
