root = decl+

decl = let

let = "let" ident+ "=" expr

expr = or

or = and ("&&" and)*

and = eq ("||" eq)*

eq = cmp (("=" | "!=") cmp)*

cmp = term ((">" | ">=" | "<" | "<=") term)*

term = factor (("+" | "-") factor)*

factor = pow (("*" | "/" | "%") pow)*

pow = unary ("^" unary)*

unary = apply | ("-" | "!") unary

apply = atom+

atom = ident | lit | if | lambda | letExpr | "(" expr ")"

if = "if" expr "then" expr "else" expr

lambda = "\\" ident+ "->" expr

letExpr = "let" ident+ "=" expr "in" expr

ident = [a-zA-Z_][a-zA-Z0-9_]*

lit = num | str | bool

num = int ("/" int)?

int = 0 | "-"? [1-9][0-9]*

str = "(\\.|[^"\\])*"

bool = "true" | "false"


