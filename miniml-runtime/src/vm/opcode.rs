#[repr(u8)]
#[derive(Debug, Clone, PartialEq)]
pub enum OpCode {
    Halt,
    Const,
    LoadGlobal,
    StoreGlobal,
    LoadLocal,
    StoreLocal,
    Add,
    Sub,
    Mul,
    Div,
    Rem,
    Pow,
    Neg,
    Not,
    Eq,
    Neq,
    Lt,
    Gt,
    Leq,
    Geq,
    And,
    Or,
    Return,
    Push,
    Pop,
    Jump,
    JumpIfFalse,
    Call,
}

impl From<u8> for OpCode {
    fn from(byte: u8) -> Self {
        match byte {
            0 => OpCode::Halt,
            1 => OpCode::Const,
            2 => OpCode::LoadGlobal,
            3 => OpCode::StoreGlobal,
            4 => OpCode::StoreLocal,
            5 => OpCode::LoadLocal,
            6 => OpCode::Add,
            7 => OpCode::Sub,
            8 => OpCode::Mul,
            9 => OpCode::Div,
            10 => OpCode::Rem,
            11 => OpCode::Pow,
            12 => OpCode::Neg,
            13 => OpCode::Not,
            14 => OpCode::Eq,
            15 => OpCode::Neq,
            16 => OpCode::Lt,
            17 => OpCode::Gt,
            18 => OpCode::Leq,
            19 => OpCode::Geq,
            20 => OpCode::And,
            21 => OpCode::Or,
            22 => OpCode::Return,
            23 => OpCode::Push,
            24 => OpCode::Pop,
            25 => OpCode::Jump,
            26 => OpCode::JumpIfFalse,
            27 => OpCode::Call,
            _ => panic!("invalid opcode"),
        }
    }
}
