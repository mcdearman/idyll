<item> ::= <expr> | <structDef>

<structDef> ::= "struct" <ws>+ <ident> <ws>+ "=" <ws>+ "{" <ws>* <ident> <ws>* ("," <ws>* <ident> <ws>*)* "}"


<expr> ::= <or>

<or> ::= <and> (<ws>* "||" <ws>* <and>)*

<and> ::= <eq> (<ws>* "&&" <ws>* <eq>)*

<eq> ::= <cmp> (<ws>* ("=" | "!=") <ws>* <cmp>)?

<cmp> ::= <term> (<ws>* ("<" | ">" | "<=" | ">=") <ws>* <term>)*

<term> ::= <factor> (<ws>* ("+" | "-") <ws>* <factor>)*

<factor> ::= <power> (<ws>* ("*" | "/" | "%") <ws>* <power>)*

<power> ::= <unary> (<ws>* "^" <ws>* <unary>)*

<unary> ::= <apply> | ("-" | "!") <unary>

<apply> ::= <atom> (<ws>+ <atom>)*

<atom> ::= <ident> | <lit> | <if> | <let> | "(" <expr> ")"

<let> ::= "let" <ws>+ <ident>+ <ws>+ "=" <ws>+ <expr> (<ws>+ "in" <ws>+ <expr>)?

<if> ::= "if" <ws>+ <expr> <ws>+ "then" <ws>+ <expr> 
    (<ws>+ "elif" <ws>+ <expr> <ws>+ "then" <ws>+ <expr>)* (<ws>+ "else" <ws>+ <expr>)?

<pattern> ::= <ident> 
| <listPattern> 
| <tuplePattern> 
| <mapPattern> 
| <wildcard> 
| <lit> 
| <structPattern> 
| <unit>

<structPattern> ::= <ident> <ws>+ "{" <ws>* <ident> <ws>* ("=" <ws>* <pattern>)? <ws>* ("," <ws>* <ident> ("=" <ws>* <pattern>)? <ws>*)* "}"

<listPattern> ::= "[" <ws>* <pattern> (<ws>* "," <ws>* <pattern>)* <ws>* "]"

<tuplePattern> ::= "(" <ws>* <pattern> (<ws>* "," <ws>* <pattern>)* <ws>* ")"

<mapPattern> ::= "{" <ws>* <string> ":" <ws>* <pattern> (<ws>* "," <ws>* <string> ":" <ws>* <pattern>)* <ws>* "}"

<lit> ::= <int> 
| <float> 
| <string> 
| <char> 
| <bool> 
| <lambda>
| <list>
| <tuple>
| <map>

<lambda> ::= "\\" <ws>+ <ident>+ <ws>+ "->" <ws>+ <expr>

<list> ::= "[" <ws>* <expr> (<ws>* "," <ws>* <expr>)* <ws>* "]"

<tuple> ::= "(" <ws>* <expr> (<ws>* "," <ws>* <expr>)* <ws>* ")"

<map> ::= "{" <ws>* <string> ":" <ws>* <expr> (<ws>* "," <ws>* <string> ":" <ws>* <expr>)* <ws>* "}"

<string> ::= "\"" <ascii>* "\""

<char> ::= "'" <ascii> "'"

<ascii> ::= <letterOrDigit> | <ws>

<ident> ::= <letter> <letterOrDigit>*

<letterOrDigit> ::= <letter> | <digit>

<letter> ::= <wildcard> | [a-z] | [A-Z]

<bool> ::= "true" | "false"

<float> ::= <int> "." <digit>+

<int> ::= "0" | <nonzero> <digit>*

<nonzero> ::= [1-9]

<digit> ::= "0" | <nonzero>

<ws> ::= " " | "\n" | "\t" | "\r"

<wildcard> ::= "_"

<unit> ::= "()"