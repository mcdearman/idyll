<file> ::= (<item> <ws>+)+

<item> ::= <decl> | <expr>

<decl> ::= <mod> | <type> | <letDecl> | <fnDecl>

<mod> ::= ("pub" <ws>+)? "mod" <ws>+ <ident> <ws>+ "{" <ws>* <decl> <ws>* "}"

<type> ::= ("pub" <ws>+)? "type" <ws>+ <ident> <ws>+ "=" <ws>+ "{" <ws>* <ident> <ws>* ("," <ws>* <ident> <ws>*)* "}"

<letDecl> ::= ("pub" <ws>+)? <let>

<fnDecl> ::= ("pub" <ws>+)? <fn>

<expr> ::= <pipe>

<pipe> ::= <stmt> (<ws>* "|>" <ws>* <pipe>)?

<stmt> ::= <or> (<ws>* ";" <ws>* <expr>)?

<or> ::= <and> (<ws>* "||" <ws>* <or>)?

<and> ::= <cmp> (<ws>* "&&" <ws>* <and>)?

<cmp> ::= <term> (<ws>* ("<" | ">" | "<=" | ">=" | "=" | "!=") <ws>* <cmp>)?

<term> ::= <factor> (<ws>* ("+" | "-") <ws>* <term>)?

<factor> ::= <power> (<ws>* ("*" | "/" | "%") <ws>* <factor>)?

<power> ::= <unary> (<ws>* "^" <ws>* <power>)?

<unary> ::= <apply> | ("-" | "!") <unary>

<apply> ::= <atom> (<ws>+ <apply>)?

<atom> ::= <ident> | <lit> | <if> | <letExpr> | <fnExpr> | "(" <expr> ")"

<letExpr> ::= <let> <ws>+ "in" <ws>+ <expr>?

<fnExpr> ::= <fn> <ws>+ "in" <ws>+ <expr>?

<let> ::= "let" <ws>+ <letPattern> <ws>+ "=" <ws>+ <expr>

<fn> ::= "fn" <ws>+ <ident> (<ws>+ <letPattern>)+ <ws>+ "=" <ws>+ <expr>

<if> ::= "if" <ws>+ <expr> <ws>+ "then" <ws>+ <expr> 
    (<ws>+ "elif" <ws>+ <expr> <ws>+ "then" <ws>+ <expr>)* (<ws>+ "else" <ws>+ <expr>)?

<match> ::= "match" <ws>+ <expr> <ws>+ "with" <ws>+ <fullPattern> <ws>+ "->" <ws>+ <expr> 
    (<ws>+ "|" <ws>+ <fullPattern> <ws>+ "->" <ws>+ <expr>)*

<fullPattern> ::= <ident>
| <lit> 
| <fullListPattern> 
| <fullTuplePattern> 
| <fullRecordPattern> 
| <fullConsPattern>
| <wildcard> 
| <unit>

<fullListPattern> ::= "[" <ws>* <fullPattern> (<ws>* "," <ws>* <fullPattern>)* <ws>* "]"

<fullTuplePattern> ::= "(" <ws>* <fullPattern> (<ws>* "," <ws>* <fullPattern>)* <ws>* ")"

<fullRecordPattern> ::= "{" <ws>* <ident> <ws>* ("=" <ws>* <fullPattern>)? <ws>* ("," <ws>* <ident> ("=" <ws>* <fullPattern>)? <ws>*)* "}"

<fullConsPattern> ::= "[" <ws>* <fullPattern> (<ws>* "," <ws>* <fullPattern>)* <ws>+ "::" <ws>+ <ident> <ws>* "]"

<letPattern> ::= <ident>
| <letListPattern>
| <letTuplePattern>
| <letRecordPattern>
| <letConsPattern>
| <wildcard>
| <unit>

<letListPattern> ::= "[" <ws>* <letPattern> (<ws>* "," <ws>* <letPattern>)* <ws>* "]"

<letTuplePattern> ::= "(" <ws>* <letPattern> (<ws>* "," <ws>* <letPattern>)* <ws>* ")"

<letRecordPattern> ::= "{" <ws>* <ident> <ws>* ("=" <ws>* <letPattern>)? <ws>* ("," <ws>* <ident> ("=" <ws>* <letPattern>)? <ws>*)* "}"

<letConsPattern> ::= "[" <ws>* <letPattern> (<ws>* "," <ws>* <letPattern>)* <ws>+ "::" <ws>+ <ident> <ws>* "]"

<lit> ::= <int> 
| <real> 
| <string> 
| <char> 
| <bool> 
| <lambda>
| <list>
| <tuple>
| <map>

<lambda> ::= "\\" <ws>+ <ident>+ <ws>+ "->" <ws>+ <expr>

<fullHint> ::= <scopedHint> (<ws>+ "->" <ws>+ <fullHint>)*

<scopedHint> ::= <hint> 
| "(" <fullHint> (<ws>+ "->" <ws>+ <fullHint>)+ ")"
| "(" <fullHint> ("," <ws>+ <fullHint>)+ ")"
| "(" <fullHint>* ")"
| "[" <fullHint> "]"

<hint> ::= <ident>

<list> ::= "[" <ws>* <expr>? (<ws>* "," <ws>* <expr>)* <ws>* "]"

<tuple> ::= "(" <ws>* <expr> (<ws>* "," <ws>* <expr>)* <ws>* ")"

<map> ::= "{" <ws>* <string> ":" <ws>* <expr> (<ws>* "," <ws>* <string> ":" <ws>* <expr>)* <ws>* "}"

<string> ::= "\"" <ascii>* "\""

<char> ::= "'" <ascii> "'"

<ascii> ::= <letterOrDigit> | <ws>

<ident> ::= <letter> <letterOrDigit>*

<letterOrDigit> ::= <letter> | <digit>

<letter> ::= <wildcard> | [a-z] | [A-Z]

<bool> ::= "true" | "false"

<real> ::= <int> "." <digit>+

<int> ::= "0" | <nonzero> <digit>*

<nonzero> ::= [1-9]

<digit> ::= "0" | <nonzero>

<ws> ::= " " | "\n" | "\t" | "\r"

<wildcard> ::= "_"

<unit> ::= "()"