-- arithmetic operators
1 + 2
1 - 2
1 * 2
1 / 2

-- value definition
x = 1

-- lambda
\a b -> a + b

-- lambda application
(\a b -> a + b) 1 2

-- function definition
f x = x + 1

-- function application
f x

-- negation
-x

-- not
!x

-- let expression
let x = 1 in x + 1

-- let expression function definition
let f x = x + 1 in f 1

compose : (b -> c) -> (a -> b) -> a -> c
compose f g x = f (g x)

fib n = 
  if n < 2 then n 
  else fib (n - 1) + fib (n - 2)

fibIter n = 
  let loop n a b = 
    if n == 0 then a
    else loop (n - 1) b (a + b)
  in loop n 0 1