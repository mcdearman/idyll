-- Files are composed of declarations at the top level. In the notebook 
-- or repl, you can use expressions at the top level. You can think of 
-- this as a shorthand for `let main args = <expr>`. In files, the main 
-- function must be defined explicitly:
let main args = 1

-- Bindings are immutable by default.
-- Top-level let-bindings must have explicit type annotations.
let x : Int = 1

gcd : Int Int -> Int
let gcd a b = 
  if b = 0 then a 
  else gcd b (a % b)

let gcd (a : Int) (b : Int) : Int = 
  if b = 0 then a 
  else gcd b (a % b)

gcd(a: Int, b: Int): Int = 
  if b = 0 then a 
  else gcd b (a % b)

-- ints
1

-- booleans
true

-- Binary operators
1 + 2 * 3^2 - 4 / 5 % 10

-- Unary operators
-1
-- => -1

not true
-- => false

-- Boolean operators
true and false or true
-- => true

-- Comparison
1 < 2 and 2 <= 3 and 3 > 2 and 3 >= 2 and 2 = 2 and 2 != 3

-- if-then-else
if 1 < 2 then 1 else 2

-- let-in
let x = 1 in x + 1

-- function definition
let f x = x + 1

-- this is equivalent to
let f = \x -> x + 1

-- function expression
let f x = x + 1 in f 1

-- function application
f 1

-- closure
\x -> x + 1

-- closure application
(\x -> x + 1) 1

-- nested let
let x = 1 in let y = 2 in x + y

-- recursion
let fib n = 
  if n <= 1 then n 
  else fib (n - 1) + fib (n - 2) 

let gcd a b = 
  if b = 0 then a 
  else gcd b (a % b)

-- tail recursion
let fib n = 
  let loop a b n = 
    if n = 0 then a 
    else loop (n - 1) b (a + b) 
  in loop 0 1 n

let gcd a b = 
  let loop a b acc = 
    if b = 0 then acc
    else loop b (a % b) b
  in loop a b a

