(def x 1)

(defn id (x) x)

(module List
  (record Nil)
  (record (Pair head tail))

;; overload `display` for `List`
(defn display (xs)
  (match xs
    (Nil (println "[]"))
    ((Pair x xs) (begin
                   (print "[")
                   (display x)
                   (print ", ")
                   (display xs)
                   (print "]")))))

(defn map (f xs)
  (match xs
    (Nil Nil)
    ((Pair x xs) (Pair (f x) (map f xs))))))

(macro defn (name args body)
  `(def ,name (fn ,args ,body)))

;; `begin` expands to a sequence of `let` forms
(macro begin (&body)
  `(let ((,_)) (begin ,@(tail body)) ,_))

(begin (println 1) (println 2) (println 3))

;; expands to:
(let ((_ (print 1)
      (_ (print 2) (print 3)))))

(let ((x 1) (y 2))
  (println (+ x y)))

(let ((fib (fn (n)
             (if (<= n 1)
                 1
                 (+ (fib (- n 1)) (fib (- n 2)))))))
  (println (fib 10)))