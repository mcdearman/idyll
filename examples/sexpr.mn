(def x 1)

(defn id (x) x)

(type List (a)
  Nil
  (Pair a (List a)))

(defn map (f xs)
  (match xs
    ([] [])
    ((Pair x xs) (Pair (f x) (map f xs)))))

(macro defn (name args body)
  `(def ,name (fn ,args ,body)))

;; `begin` expands to a sequence of `let` forms
(macro begin (&body)
  `(let ((,_)) (begin ,@(tail body)) ,_))

(begin (println 1) (println 2) (println 3))

;; expands to:
(let ((_)) (print 1) 
  (let ((_)) (print 2) 
    (let ((_)) (print 3) _)) '())

let _ = println 1 in
let _ = println 2 in
let _ = println 3 in
()

(let ((x 1) (y 2))
  (println (+ x y)))

(let ((fib (fn (n)
             (if (<= n 1)
                 1
                 (+ (fib (- n 1)) (fib (- n 2)))))))
  (println (fib 10)))