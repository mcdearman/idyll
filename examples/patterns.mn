-- ident pattern
let x = 1

-- list pattern
let [x, y] = [1, 2]

-- tuple pattern
let (y, z) = (2, 3)

-- record pattern
type Point = { x : i32, y : i32 }
let Point { x, y } = Point { x: 1, y: 2 }

-- map pattern
let { x: x, y: x } = { x: 1, y: 2 }

-- cons patterns
let [x::xs] = [1, 2, 3]
let [x, y :: xs] = [1, 2, 3]

-- match
let x = Point 1 2
match x with
  | { x, y } -> x + y
  | _ -> 0