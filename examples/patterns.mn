-- ident pattern
let x = 1

-- list pattern
let [x, y] = [1, 2]

-- tuple pattern
let (y, z) = (2, 3)

-- record pattern
data Point = { x, y }
let Point { x, y } = Point { x : 1, y : 2 }

-- map pattern
let { x, y } = { x: 1, y: 2 }

-- cons patterns
let [car :: cdr] = [1, 2, 3]
let [x, y :: cdr] = [1, 2, 3]

-- match
let x = Point 1 2
match x with
  | { x, y } -> x + y
  | _ -> 0