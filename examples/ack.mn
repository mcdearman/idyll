let ack m n =
  if m = 0 then n + 1
  else if n = 0 then ack (m - 1) 1
  else ack (m - 1) (ack m (n - 1))

ack 0 n = n + 1
ack m 0 = ack (m - 1) 1
ack m n = ack (m - 1) (ack m (n - 1))

let ack 0 n = n + 1
  | ack m 0 = ack (m - 1) 1
  | ack m n = ack (m - 1) (ack m (n - 1))

let ack m n = match (m, n) with
  | (0, n) -> n + 1
  | (m, 0) -> ack (m - 1) 1
  | (m, n) -> ack (m - 1) (ack m (n - 1))

let fib n = 
  let loop a b n = 
    if n = 0 then a 
    else loop (n - 1) b (a + b) 
  in loop 0 1 n

-- in sexprs
(define (fib n)
  (let loop ((a 0) (b 1) (n n))
    (if (= n 0) a
        (loop b (+ a b) (- n 1)))))

(def (ack 0 n) (+ n 1))
(def (ack m 0) (ack (- m 1) 1))
(def (ack m n) (ack (- m 1) (ack m (- n 1))))

(def (ack m n) 
  (match (m n)
    ((0 n) (+ n 1))
    ((m 0) (ack (- m 1) 1))
    ((m n) (ack (- m 1) (ack m (- n 1))))))

(def (ack m n) 
       (match (m n)
         ((0 n) (+ n 1))
         ((m 0) (ack (- m 1) 1))
         ((m n) (ack (- m 1) (ack m (- n 1))))))

(macro (if cond then else)
  (match cond
    (true then-expr)
    (false else-expr)))