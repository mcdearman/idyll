-- MiniML is a scripting language but there are no top level expressions.
-- Every MiniML script must have a main function that serves as the entry point.
fn main = 
  -- You can use `;` to chain expressions together.
  -- You can think of this as a binary op that always returns unit.
  -- It's equivalent to `let _ = ... in ...`
  println "Hello World!";

  -- You can use `let` to bind values to names.
  let x = 1 in println x;

  -- Arithmetic
  1 + 1;
  21 - 2;
  2 * 2;
  4 / 2;
  5 % 2;
  6^2;

  -- elif
  if x = y then 1 
  elif x = z 
  then 2 else 3;

  -- lambda expression
  \a b -> a + b

  -- lambda application
  (\a b -> a + b) 1 2
  
-- The only declarations that can appear outside of functions 
-- are struct definitions and global variables.
struct Point = { x, y }

const true = 1
const false = 0

-- global function definition
fn add x y = x + y

-- recursion
fn gcd a b =
  if b = 0 then a 
  else gcd b (a % b)

-- lambdas can be assigned to variables
let gcd = \a b ->
  if b = 0 then a 
  else gcd b (a % b)

-- symbols like lisp
const :foo
