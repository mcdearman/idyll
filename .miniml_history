#V2
1 + 1\n
def x = 1\n
def map f xs = \n  match xs\n  | [] -> []\n  | (x::xs) -> f x :: map f xs\n
let _ = 1\n
def _ = 1\n
def _ = match true\n    | true -> 1\n    | false -> 2\n
def _ = match true\n    | true -> 1\n    | false -> true\n
def _ = match true\n    | true -> 1\n    | 2 -> 2\n
def map f xs = \n  match xs\n  | [] -> []\n  | (x::xs) -> f x :: map f xs\n
[1, 2, 3]\n
[1]\n
def xs = [1]\n
def xs = [1, 2, 3]\n
[1, 2, 3]\n
def xs = [1, 2, 3]\n
[1, 2, 3]\n
def xs = [1, 2, 3]\n
def map f xs = \n  match xs\n  | [] -> []\n  | (x::xs) -> f x :: map f xs\n
def xs = [1, 2, 3]\n
def [x, y] = [1, 2]\n
def x = []\n
match [1, 2]\n  | [] -> 1\n  | _ -> 2\n
match [1, 2]\n  | [] -> 1\n  | _ -> "hello"\n
def (x::xs) = [1, 2, 3]\n
def map f xs = \n  match xs\n  | [] -> []\n  | (x::xs) -> f x :: map f xs\n
def f x = f x\n
def f x = f\n
def map f xs = \n  match xs\n  | [] -> []\n  | (x::xs) -> f x :: map f xs\n
def foldl f acc xs =\n  match xs\n  | [] -> acc\n  | (x::xs) -> foldl f (f acc x) xs\n
def map f xs = \n  match xs\n  | [] -> []\n  | (x::xs) -> f x :: map f xs\n
def foldr f acc xs =\n  match xs\n  | [] -> acc\n  | (x::xs) -> f x (foldr f acc xs)\n
def f x = f\n
def [x, y] = [1, 2]\n
def f x = f\n
def [x, y] = [1, 2]\n
def foldr f acc xs =\n  match xs\n  | [] -> acc\n  | (x::xs) -> f x (foldr f acc xs)\n
def map f xs = \n  match xs\n  | [] -> []\n  | (x::xs) -> f x :: map f xs\n
let f x = f in f 2\n
def f x = f\n
def map f xs = \n  match xs\n  | [] -> []\n  | (x::xs) -> f x :: map f xs\n
def f x = f\n
def id x = x\n
def f x = f\n
def map f xs = \n  match xs\n  | [] -> []\n  | (x::xs) -> f x :: map f xs\n
1 + 2\n
def x = 1\n
def x = 1\n  def y = 2\n
def y = 2\n
def x = 1\n  def y = 2\n
def f x = g x\n  def g x = f x\n
def y = 2\n
def x = 1\n  def y = 2\n
def f x = g x\n  def g x = f x\n
def f x = g x\n  def g x = f x\n  def x = 1\n
def x = y\n  def y = x\n
def x = 1\n
def f x = g x\n  def g x = f x\n  def x = 1\n
def x = 1\n
def id x = x\n
def x = 1\n
def id x = x\n
[1, 2]\n
def gcd a b = \n  if b = 0 then a \n  else gcd b (a % b)\n
def lcm a b = a * b / gcd a b\n
def foldl f acc xs =\n  match xs with\n  | [] -> acc\n  | (x :: xs) -> foldl f (f acc x) xs\n
def e5 = foldl lcm 2 [1, 2, 3]\n
def x = 1\n
x + 2\n
x + "hello"\n
x + 3\n
def foldl f acc xs =\n  match xs with\n  | [] -> acc\n  | (x :: xs) -> foldl f (f acc x) xs\n
def foldl f acc xs =\n    match xs with\n    | [] -> acc\n    | (x :: xs) foldl f (f acc x) xs\n
def foldl f acc xs =\n    match xs with\n    | [] -> acc\n    | (x :: xs) -> foldl f (f acc x) xs\n
def gcd a b = \n  if b = 0 then a \n  else gcd b (a % b)\n
def lcm a b = a * b / gcd a b\n
lcm 20 11\n
x = lcm 20 11\n
def x = lcm 20 11\n
def x = 1\n
1 + 4 = x\n
x'\n
1 + 2\n
x'\n
#{}\n
