root = item*

item = def | expr

def = ident+ '=' expr

expr = term

term = factor (('+' | '-') term)?

factor = unary (('*' | '/') factor)?

unary = ('-' | '!')* apply

apply = atom+

atom = ident | lit | lambda | let | if '(' expr ')'

lambda = '\\' ident+ '=>' expr

let = "let" ident+ '=' expr "in" expr

if = "if" expr "then" expr "else" expr

ident = [a-zA-Z_][a-zA-Z0-9_]*

lit = number | bool

number = -?((0b[0-1]+)|(0o[0-7]+)|(0x[0-9a-fA-F]+)|([1-9]\d*|0))/-?((0b[0-1]+)|(0o[0-7]+)|(0x[0-9a-fA-F]+)|([1-9]\d*|0))

bool = "true" | "false"