#V2
1
1\n;;
1;; 
1;;
1 + 1\n;;
1\n;;
1 + 2;;
let fib n =\n    let loop a b i =\n      if i = 0 then a\n      else loop b (a + b) (i - 1)\n    in loop 0 1 n;;
fib 10;;
fib 20;;
let fib n =\n    let loop a b i =\n      if i = 0 then a\n      else loop b (a + b) (i - 1)\n    in loop 0 1 n;;
1 + 1;;
1+ 1\n;;
let [a, b] = [1, 2];;
a;;
b;;
let a = 1;;
a\n;;
let a = 2;;
a;;
let [a, b] = 1;;
match [1, 2]\n  | [1, y] -> y + 23;;
match [1, 2]\n  | [x, y] -> y + x;;
match [1, 2]\n  | [x, y] -> x - y\n  | a -> a;;
match [1, 2]\n  | [x, y] -> x - y\n  | _ -> a;;
match [1, 2]\n  | [x, y] -> x - y\n  | [] -> a;;
match [1, 2]\n  | [x, y] -> x - y\n  | [] -> 1;;
match []\n  | [] -> 1;;
[] = []\n;;
(1 :: [2, 3]) = [1, 2, 3]\n;;
(1 :: [2, 3]) = [1, 2, 4];;
let map f xs =\n    match xs\n    | [] -> []\n    | x :: xs -> f x :: map f xs;;
let map f xs =\n    match xs\n    | [] -> []\n    | (x :: xs) -> f x :: map f xs;;
map (x -> x + x) [1, 2, 3]\n;;
map (\\x -> x + x) [1, 2, 3]\n;;
match [1, 2, 3]\n  | [] -> 1;;
match [1, 2, 3]\n  | [] -> 1\n  | x -> x;;
match [1, 2, 3]\n  | (x :: xs) -> x;;
let map f xs =\n    match xs\n    | [] -> []\n    | (x :: xs) -> f x :: map f xs;;
map (\\x -> x + x) [1, 2];;
let map f xs =\n    match xs\n    | [] -> []\n    | (x :: xs) -> f x :: map f xs;;
map (\\x -> x + x) [1, 2];;
let map f xs =\n    match xs\n    | [] -> []\n    | (x :: xs) -> f x :: map f xs;;
map (\\x -> x + x) [1, 2];;
let (x :: xs) = [1, 2, 3];;
let map f xs =\n    match xs\n    | [] -> []\n    | (x :: xs) -> f x :: map f xs;;
let (x :: xs) = [1, 2, 3];;
let map f xs =\n    match xs\n    | [] -> []\n    | (x :: xs) -> f x :: map f xs;;
map (\\x -> x + x) [1, 2];;
let map f xs =\n    match xs\n    | [] -> []\n    | (x :: xs) -> f x :: map f xs;;
map (\\x -> x + x) [1, 2];;
let map f xs =\n    match xs\n    | [] -> []\n    | (x :: xs) -> f x :: map f xs;;
map (\\x -> x + x) [1, 2];;
let map f xs =\n    match xs\n    | [] -> []\n    | (x :: xs) -> f x :: map f xs;;
map (\\x -> x + x) [1, 2];;
let map f xs =\n    match xs\n    | [] -> []\n    | (x :: xs) -> f x :: map f xs;;
map (\\x -> x + x) [1, 2];;
let map f xs =\n    match xs\n    | [] -> []\n    | (x :: xs) -> f x :: map f xs;;
map (\\x -> x + x) [1, 2];;
1/2\n;;
map (\\x -> x) [1/2, 2];;
map (\\x -> x + 1) [1/2, 2];;
map (\\x -> x) [1/2, 3];;
map (\\x -> x) [1/2, 3/3];;
map (\\x -> x) [1/2, 3/4];;
map (\\x -> x) [1/2, "string"];;
let map f xs =\n    match xs\n    | [] -> []\n    | (x :: xs) -> f x :: map f xs;;
let double x = x + x;;
map double [1, 2, 3];;
[1, 1/2];;
[1, 2];;
[1/2, "strin"];;
[1/2, 2/3];;
let map f xs =\n    match xs\n    | [] -> []\n    | (x :: xs) -> f x :: map f xs;;
let fib n =\n    let loop a b i =\n      if i = 0 then a\n      else loop b (a + b) (i - 1)\n    in loop 0 1 n;;
map fib [1, 2, 3];;
map fib [10, 20, 30];;
